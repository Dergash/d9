{"version":3,"sources":["components/PaperdollView/PaperdollView.module.css","components/AppBar/AppBar.module.css","components/PaperdollView/PaperdollView.tsx","components/AppBar/AppBar.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["module","exports","PaperdollRace","PaperdollGender","PaperdollRole","PaperdollArmor","PaperdollView","React","useState","skin","setSkin","hair","setHair","major","setMajor","minor","setMinor","gender","Male","race","Human","role","Rogue","armor","None","paperdollDescriptor","setPaperdollDescriptor","paperdollName","getPaperdollName","OtherComponent","lazy","className","styles","container","placeholder","fallback","onChange","e","target","value","Female","Warrior","Priest","MagicUser","Light","Medium","Heavy","onClick","AppBar","to","link","memo","App","path","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.a2ecdc0c.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"PaperdollView_container__3aPMc\",\"placeholder\":\"PaperdollView_placeholder__3Pqmp\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"AppBar_container__3uZgi\",\"link\":\"AppBar_link__WUTSw\"};","import React, { Suspense } from 'react'\nimport styles from './PaperdollView.module.css'\n\ntype PaperdollDescriptor = {\n    gender: PaperdollGender,\n    race: PaperdollRace,\n    role: PaperdollRole,\n    armor: PaperdollArmor\n}\n\nfunction getPaperdollName(paperdollDescriptor: PaperdollDescriptor) {\n    const { race, gender, role, armor } = paperdollDescriptor\n    return `C${race}${gender}${role}${armor}INV.BAM`\n}\n\nenum PaperdollRace {\n    Human = 'H'\n}\n\nenum PaperdollGender {\n    Male = 'M',\n    Female = 'F'\n}\n\nenum PaperdollRole {\n    Warrior = 'F',\n    Priest = 'C',\n    Rogue = 'T',\n    MagicUser = 'W'\n}\n\nenum PaperdollArmor {\n    None = '1',\n    Light = '2',\n    Medium = '3',\n    Heavy = '4'\n}\n\nexport const PaperdollView: React.FC = () => {\n    const [skin, setSkin] = React.useState(12)\n    const [hair, setHair] = React.useState(17)\n    const [major, setMajor] = React.useState(44)\n    const [minor, setMinor] = React.useState(55)\n    const [paperdollDescriptor, setPaperdollDescriptor] = React.useState({\n        gender: PaperdollGender.Male,\n        race: PaperdollRace.Human,\n        role: PaperdollRole.Rogue,\n        armor: PaperdollArmor.None\n    })\n\n    const paperdollName = getPaperdollName(paperdollDescriptor)\n    const OtherComponent = React.lazy(() => {\n        return import('./PaperdollBam')\n    })\n\n    const handleSkin = (e: React.MouseEvent<HTMLButtonElement, MouseEvent>) => {\n        setSkin(skin + 1)\n    }\n\n    const handleHair = (e: React.MouseEvent<HTMLButtonElement, MouseEvent>) => {\n        setHair(hair + 1)\n    }\n\n    const handleMajor = (e: React.MouseEvent<HTMLButtonElement, MouseEvent>) => {\n        setMajor(major + 1)\n    }\n\n    const handleMinor = (e: React.MouseEvent<HTMLButtonElement, MouseEvent>) => {\n        setMinor(minor + 1)\n    }\n\n    const handleGender = (e: React.ChangeEvent<HTMLSelectElement>) => {\n        setPaperdollDescriptor({\n            ...paperdollDescriptor,\n            gender: e.target.value as PaperdollGender\n        })\n    }\n\n    const handleRace = (e: React.ChangeEvent<HTMLSelectElement>) => {\n        setPaperdollDescriptor({\n            ...paperdollDescriptor,\n            race: e.target.value as PaperdollRace\n        })\n    }\n\n    const handleRole = (e: React.ChangeEvent<HTMLSelectElement>) => {\n        setPaperdollDescriptor({\n            ...paperdollDescriptor,\n            role: e.target.value as PaperdollRole\n        })\n    }\n\n    const handleArmor = (e: React.ChangeEvent<HTMLSelectElement>) => {\n        setPaperdollDescriptor({\n            ...paperdollDescriptor,\n            armor: e.target.value as PaperdollArmor\n        })\n    }\n\n    return <div className={styles.container}>\n        <div className={styles.placeholder}>\n            <Suspense fallback={<div>Loading...</div>}>\n                <OtherComponent\n                    paperdollName={paperdollName}\n                    skin={skin}\n                    hair={hair}\n                    major={major}\n                    minor={minor}\n                />\n            </Suspense>\n        </div>\n        <div>\n            <select onChange={handleGender} value={paperdollDescriptor.gender}>\n                <option value={PaperdollGender.Male}>\n                    Male\n                </option>\n                <option value={PaperdollGender.Female}>\n                    Female\n                </option>\n            </select>\n            <select onChange={handleRace} value={paperdollDescriptor.race}>\n                <option value={PaperdollRace.Human}>\n                    Human\n                </option>\n                <option>Elf</option>\n                <option>Half-elf</option>\n                <option>Dwarf</option>\n                <option>Gnome</option>\n                <option>Halfling</option>\n            </select>\n            <select onChange={handleRole} value={paperdollDescriptor.role}>\n                <option value={PaperdollRole.Warrior}>\n                    Warrior\n                </option>\n                <option value={PaperdollRole.Priest}>\n                    Priest\n                </option>\n                <option value={PaperdollRole.Rogue}>\n                    Rogue\n                </option>\n                <option value={PaperdollRole.MagicUser}>\n                    Magic User\n                </option>\n            </select>\n            <select onChange={handleArmor} value={paperdollDescriptor.armor}>\n                <option value={PaperdollArmor.None}>\n                    None\n                </option>\n                <option value={PaperdollArmor.Light}>\n                    Light\n                </option>\n                <option value={PaperdollArmor.Medium}>\n                    Medium\n                </option>\n                <option value={PaperdollArmor.Heavy}>\n                    Heavy\n                </option>\n            </select>\n            <div>\n                <button onClick={handleSkin}>Skin: {skin}</button>\n                <button onClick={handleHair}>Hair: {hair}</button>\n                <button onClick={handleMajor}>Major: {major}</button>\n                <button onClick={handleMinor}>Minor: {minor}</button>\n            </div>\n        </div>\n    </div>\n}\n\nexport default PaperdollView\n","import React from 'react'\nimport {Link} from 'react-router-dom'\nimport styles from './AppBar.module.css'\n\nexport const AppBar: React.FC = () => {\n    return <div className={styles.container}>\n        <Link to=\"/bam-paperdoll\" className={styles.link}>\n            Paperdolls\n        </Link>\n    </div>\n}\n\nexport default React.memo(AppBar)\n","import React from 'react';\nimport './App.css';\nimport PaperdollView from './components/PaperdollView/PaperdollView'\nimport {\n  BrowserRouter,\n  Switch,\n  Route,\n  Redirect\n} from 'react-router-dom'\nimport {AppBar} from './components/AppBar/AppBar'\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <BrowserRouter>\n        <AppBar />\n        <Switch>\n          <Route path=\"/bam-paperdoll\">\n            <PaperdollView />\n          </Route>\n          <Route path=\"/\">\n            <Redirect to=\"/bam-paperdoll\" />\n          </Route>\n        </Switch>\n      </BrowserRouter>\n    </div>\n  )\n}\n\nexport default App\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}