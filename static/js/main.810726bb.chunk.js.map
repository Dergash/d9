{"version":3,"sources":["components/MPALETTE.bmp","adapters/bam-texture.ts","adapters/bam.ts","model/palette.ts","model/sprite.ts","components/bam-demo.tsx","App.tsx","serviceWorker.ts","index.tsx","components/COLGRAD.BAM"],"names":["module","exports","BAMTexture","name","header","palette","frames","this","forEach","frame","compressed","data","compressionByte","compressedData","DataView","decompressedData","i","byteLength","getUint8","numberOfRepeats","processedRepeats","push","Uint8Array","decompressRLE","compressedColorIndex","applyPaddedDimensions","dimensions","reduce","prev","next","paddedWidth","prevPaddedWidth","paddedHeight","prevPaddedHeight","nextPaddedWidth","width","height","spriteSize","index","putFrameInSprite","spriteData","spriteDimensions","frameIndex","getFrameRange","frameStart","start","frameEnd","end","getFramePadding","horizontal","imageRange","vertical","putImageInSprite","range","padding","frameBytesCounter","paddingBytesCounter","srcPixelIndex","map","centerX","Math","abs","centerY","offsets","BAMAdapter","signature","parseHeader","parseFrames","parsePalette","paletteOffset","frameLookupTableOffset","view","offset","parsedSignature","TextDecoder","decode","frameEntriesCount","getUint16","cyclesCount","frameEntriesOffset","getUint32","Error","red","green","blue","frameHeader","frameEntries","frameOffset","frameEntry","getInt16","Boolean","rgbaOffset","slice","metal","minor","major","skin","leather","armor","hair","Palette","colors","newPalette","Object","keys","color","length","gradient","reverse","Sprite","PaletteHelper","transparencyIndex","getTransparencyIndex","setColors","pixels","canvas","document","createElement","context","getContext","imgData","createImageData","putImageData","toDataURL","BamDemo","React","useState","setColor","bam","parse","colorIcon","decompressFrames","combineFrames","parsedPalette","base64","getAsBase64","onClick","src","alt","App","className","window","location","hostname","match","ReactDOM","render","StrictMode","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"4EAAAA,EAAOC,QAAU,EAAQ,EAAR,CAAwE,6sL,sOC2BpEC,E,WAEjB,WACWC,EACAC,EACAC,EACAC,GACR,yBAJQH,OAIT,KAHSC,SAGT,KAFSC,UAET,KADSC,S,+DAMS,IAAD,OACfC,KAAKD,OAAOE,SAAQ,SAAAC,GACZA,EAAMC,YAAcD,EAAME,OAC1BF,EAAME,KAoJf,SAAuBA,EAAmBC,GAG7C,IAFA,IAAMC,EAAiB,IAAIC,SAASH,GAC9BI,EAAmB,GAChBC,EAAI,EAAGA,EAAIH,EAAeI,WAAYD,IAC3C,GAAIH,EAAeK,SAASF,KAAOJ,EAAiB,CAEhD,IADA,IAAMO,EAAkBN,EAAeK,SAASF,EAAI,GAAK,EAChDI,EAAmB,EAAGA,EAAmBD,EAAiBC,IAC/DL,EAAiBM,KAAKT,GAE1BI,GAAQ,OAERD,EAAiBM,KAAKR,EAAeK,SAASF,IAGtD,OAAO,IAAIM,WAAWP,GAlKGQ,CAAcd,EAAME,KAAM,EAAKP,OAAOoB,sBACnDf,EAAMC,YAAa,Q,sCAWd,IAAD,OACZH,KAAKkB,wBACL,IAAMC,EAAanB,KAAKD,OAAOqB,QAAO,SAACC,EAAqBC,GAAyB,IAAD,EACCD,EAAzEE,YAAaC,OAD2D,MACzC,EADyC,IACCH,EAAvCI,aAAcC,OADwB,MACL,EADK,IAECJ,EAAzEC,YAAaI,OAF2D,MAEzC,EAFyC,IAECL,EAAvCG,aAC1C,MAAO,CACHG,MAAOJ,EAAkBG,EAAkBA,EAAkBH,EAC7DK,OAAQH,QALoE,MAEL,EAFK,OAQ9EI,EAAaX,EAAWS,MAAQT,EAAWU,OAC3CzB,EAAO,IAAIW,WAAWe,GAC5B9B,KAAKD,OAAOE,SAAQ,SAACC,EAAO6B,GACxB,EAAKC,iBAAiB5B,EAAMe,EAAYjB,EAAO6B,MAEnD/B,KAAKD,OAAS,CAAC,CACXK,OACAwB,MAAOT,EAAWS,MAClBC,OAAQV,EAAWU,W,uCAYVI,EAAwBC,EAA8BhC,EAAsBiC,GAQzF,IAR6G,MAEhEnC,KAAKoC,cAAcD,EAAYD,GAA7DG,EAF8F,EAErGC,MAAwBC,EAF6E,EAElFC,IAFkF,EAI5ExC,KAAKyC,gBAAgBvC,EAAOgC,GAArDQ,EAJqG,EAIrGA,WAEFC,EAAa,CAAEL,MAAOD,EANiF,EAIzFO,SAE+BJ,IAAKD,GAE/C9B,EAAI4B,EAAY5B,EAAIkC,EAAWL,MAAO7B,IAC3CwB,EAAWxB,GAAKT,KAAKH,OAAOoB,qBAGhCjB,KAAK6C,iBAAiBZ,EAAYU,EAAYzC,EAAOwC,K,uCAexCtC,EAAkB0C,EAAc5C,EAAsB6C,GAInE,IAHA,IAAIC,EAAoB,EACpBC,EAAsBF,EACtBG,EAAgB,EACXzC,EAAIqC,EAAMR,MAAO7B,EAAIqC,EAAMN,IAAK/B,IACT,IAAxBwC,GACA7C,EAAKK,GAAKT,KAAKH,OAAOoB,qBACtBgC,MAEI7C,IACAA,EAAKK,GAAKP,EAAME,KAAO,IAAIW,WAAWb,EAAME,MAAM8C,GAAiB,GAEvEA,IACAF,KAEAA,IAAsB9C,EAAM0B,QAC5BqB,EAAsBF,EACtBC,EAAoB,K,8CAa5BhD,KAAKD,OAASC,KAAKD,OAAOoD,KAAI,SAAAjD,GAAK,kCAC5BA,EAD4B,CAE/BqB,aAAc,UAACrB,EAAMkD,eAAP,QAAkB,GAAK,EAAKC,KAAKC,IAAL,UAASpD,EAAMkD,eAAf,QAA0B,GAAKlD,EAAM0B,MAAQ1B,EAAM0B,MAC7FH,cAAe,UAACvB,EAAMqD,eAAP,QAAkB,GAAK,EAAKF,KAAKC,IAAL,UAASpD,EAAMqD,eAAf,QAA0B,GAAKrD,EAAM2B,OAAS3B,EAAM2B,c,oCAWzFM,EAAoBD,GAE9B,IAF6D,IAAD,EACxDI,EAAQ,EACH7B,EAAI,EAAGA,EAAI0B,EAAY1B,IAAK,CAAC,IAAD,EACYT,KAAKD,OAAOU,GADxB,IACzBc,mBADyB,MACX,EADW,MACRE,aACrBa,GAASf,QAFoB,MACO,EADP,GAKrC,MAAO,CAAEe,QAAOE,IADJF,EAAQJ,EAAiBN,OAAjB,UAA0B5B,KAAKD,OAAOoC,GAAYV,oBAAlD,QAAkE,M,sCAO1EvB,EAAsBgC,GAAwC,IAAD,EACzE,MAAO,CACHQ,WAAYR,EAAiBN,MAAQ1B,EAAM0B,MAC3CgB,SAAUV,EAAiBN,QAAS,UAAC1B,EAAMuB,oBAAP,QAAuB,GAAKvB,EAAM2B,a,KCpIlF,IAAM2B,EAGiB,EAHjBA,EAIW,GAJXA,EAKoB,GALpBA,EAMY,GANZA,EAOO,GAPPA,EAQgB,GAgBDC,E,iDAQTC,UAAoB,G,kDAEtB9D,EAAcQ,GAChB,IAAMP,EAASG,KAAK2D,YAAYvD,GAC1BL,EAASC,KAAK4D,YAAYxD,EAAMP,GAChCC,EAAUE,KAAK6D,aAAazD,EAAMP,EAAOiE,cAAejE,EAAOkE,wBAErE,OADgB,IAAIpE,EAAWC,EAAMC,EAAQC,EAASC,K,kCAU9CK,GAGR,IAFA,IAAM4D,EAAO,IAAIzD,SAASH,GACtBsD,EAAY,IAAI3C,WAAW,GACtBkD,EAAS,EAAQA,EAAS,EAAQA,IACvCP,EAAUO,GAAUD,EAAKrD,SAASsD,GAEtC,IAAMC,EAAkB,IAAIC,YAAY,SAASC,OAAOV,GACxD,GAAwB,aAApBQ,EAEA,OADAlE,KAAK0D,UAAYQ,EACV,CACHG,kBAAmBL,EAAKM,UAAUd,GAA2B,GAC7De,YAAaP,EAAKrD,SAAS6C,GAC3BvC,qBAAsB+C,EAAKrD,SAAS6C,GACpCgB,mBAAoBR,EAAKS,UAAUjB,GAAsB,GACzDM,cAAeE,EAAKS,UAAUjB,GAAiB,GAC/CO,uBAAwBC,EAAKS,UAAUjB,GAA0B,IAGzE,MAAM,IAAIkB,MAAJ,0BAA6BR,M,mCAU1B9D,EAAmB6D,EAAgBzB,GAG5C,IAFA,IAAMwB,EAAO,IAAIzD,SAASH,GACpBN,EAAU,GACPW,EAAIwD,EAAQxD,EAAI+B,EAAM,EAAG/B,GAAQ,EAAG,CACzC,IAAMkE,EAAMX,EAAKrD,SAASF,GACpBmE,EAAQZ,EAAKrD,SAASF,EAAI,GAC1BoE,EAAOb,EAAKrD,SAASF,EAAI,GAE/BX,EAAQgB,KAAK,CAAE6D,MAAKC,QAAOC,SAE/B,OAAO/E,I,kCASCM,EAAmB0E,GAI3B,IAJ0E,IAClEN,EAAyCM,EAAzCN,mBAAoBH,EAAqBS,EAArBT,kBACtBL,EAAO,IAAIzD,SAASH,GACpB2E,EAAe,GACZ5C,EAAa,EAAGA,EAAakC,EAAmBlC,IAAc,CACnE,IAAM6C,EAAcR,EAtFR,GAsF6BrC,EACnC8C,EAAa,CACfrD,MAAOoC,EAAKM,UAAUU,EAAc,GAAQ,GAC5CnD,OAAQmC,EAAKM,UAAUU,EAAc,GAAQ,GAC7C5B,QAASY,EAAKkB,SAASF,EAAc,GAAQ,GAC7CzB,QAASS,EAAKkB,SAASF,EAAc,GAAQ,GAC7C7E,WAAYgF,QAAQnB,EAAKrD,SAASqE,EAAc,EAAS,IACzD5E,KAAM,MAGJgF,EAAcpB,EAAKS,UAAUO,EAhGvB,GAgGuD,GAAG,IAAS,GAAM,EACrFC,EAAW7E,KAAOA,EAAKiF,MAAMD,GAE7B,IAAMjF,EAAa6D,EAAKS,UAAUO,EAnGtB,GAmGsD,GAAG,IAAS,GAC9EC,EAAW9E,YAAcA,EACzB4E,EAAajE,KAAKmE,GAEtB,OAAOF,M,YC1JTvB,EAAU,CACZ8B,MAAO,EACPC,MAAO,GACPC,MAAO,GACPC,KAAM,GACNC,QAAS,GACTC,MAAO,GACPC,KAAM,IAGWC,E,kGACP/F,EAAqBgG,GAC3B,IAAMC,EAAU,YACTjG,GAaP,OAXAkG,OAAOC,KAAKH,GAAQ7F,SAAQ,SAACiG,GACzB,GAAIJ,EAAOI,GACP,IAAK,IAAIzF,EAAI,EAAGA,EAAI,GAAIA,IAGrBsF,EAAWvC,EAAQ0C,GAAiCzF,GAAKqF,EAAOI,GAA+BzF,MAMnGsF,I,2CAGUjG,GACjB,IAAK,IAAIW,EAAI,EAAGA,EAAIX,EAAQqG,OAAQ1F,IAChC,GAAuB,IAAnBX,EAAQW,GAAGkE,KAAkC,MAArB7E,EAAQW,GAAGmE,OAAqC,IAApB9E,EAAQW,GAAGoE,KAC/D,OAAOpE,EAGf,OAAO,I,4BAGLL,GAMF,IALA,IAAM4D,EAAO,IAAIzD,SAASH,GAEpBN,EAAU,GACZsG,EAAW,GAEN3F,EAJauD,EAAKrD,SAAS,IAIRF,EAAIL,EAAKM,WAAYD,GAAQ,EACrD2F,EAAStF,KAAK,CACV+D,KAAMb,EAAKrD,SAASF,EAAI,GACxBmE,MAAOZ,EAAKrD,SAASF,EAAI,GACzBkE,IAAKX,EAAKrD,SAASF,KAEC,KAApB2F,EAASD,SACTrG,EAAQgB,KAAKsF,GACbA,EAAW,IAInB,OADAtG,EAAQuG,UACDvG,M,KCrDMwG,E,WAajB,WAAY3G,GAAyB,yBAXrCA,gBAWoC,OAVpCmG,OAAyB,CACrBF,KAAM,KACNH,KAAM,KACND,MAAO,KACPD,MAAO,KACPI,MAAO,KACPD,QAAS,KACTJ,MAAO,MAIPtF,KAAKL,WAAaA,E,0DAKlB,IAAM4G,EAAgB,IAAIV,EACtB/F,EAAO,YAAOE,KAAKL,WAAWG,SAFxB,EAGsBE,KAAKL,WAAWI,OAAO,GAA/C6B,EAHE,EAGFA,MAAOC,EAHL,EAGKA,OAAQzB,EAHb,EAGaA,KACjBoG,EAAoBD,EAAcE,qBAAqB3G,GAC7DA,EAAUyG,EAAcG,UAAU5G,EAASE,KAAK8F,QAEhD,IAAMa,EAAS,IAAI5F,WAAWX,GAExBwG,EAASC,SAASC,cAAc,UACtCF,EAAOhF,MAAQA,EACfgF,EAAO/E,OAASA,EAIhB,IAHA,IAAMkF,EAAUH,EAAOI,WAAW,MAC5BC,EAAUF,EAAQG,gBAAgBtF,EAAOC,GAEtCpB,EAAI,EAAGA,EAAIkG,EAAOR,OAAQ1F,IAC/BwG,EAAQ7G,KAAS,EAAJK,EAAQ,GAAKX,EAAQ6G,EAAOlG,IAAIoE,KAC7CoC,EAAQ7G,KAAS,EAAJK,EAAQ,GAAKX,EAAQ6G,EAAOlG,IAAImE,MAC7CqC,EAAQ7G,KAAS,EAAJK,EAAQ,GAAKX,EAAQ6G,EAAOlG,IAAIkE,IAC7CsC,EAAQ7G,KAAS,EAAJK,EAAQ,GAAMkG,EAAOlG,KAAO+F,EAAqB,EAAI,IAKtE,OAFAO,EAAQI,aAAaF,EAAS,EAAG,GAClBL,EAAOQ,UAAU,iB,KCnBzBC,EAnBkB,WAAO,IAAD,EACTC,IAAMC,SAAS,GADN,mBAC5BrB,EAD4B,KACrBsB,EADqB,KAG7BC,GADU,IAAIhE,GACAiE,MAAM,UAAWC,KACrCF,EAAIG,mBACAH,EAAI1H,OAAOoG,OAAS,GACpBsB,EAAII,gBAER,IAAMzB,EAAW,IAAIE,EAAOmB,GAEtBK,GADgB,IAAIjC,GACU6B,MAAM5H,KAC1CsG,EAASN,OAAOR,MAAQwC,EAAc5B,GACtC,IAAM6B,EAAS3B,EAAS4B,cACxB,OAAO,6BACH,4BAAQC,QAAS,kBAAMT,EAAStB,EAAQ,KAAxC,eAAyDA,GACzD,yBAAKgC,IAAKH,EAAQI,IAAI,iBCXfC,MARf,WACE,OACE,yBAAKC,UAAU,OACb,kBAAC,EAAD,QCKclD,QACW,cAA7BmD,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEF/B,SAASgC,eAAe,SDiIpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,a,kBEjJ5B9J,EAAOC,QAAU,EAAQ,EAAR,CAAwE,spE","file":"static/js/main.810726bb.chunk.js","sourcesContent":["module.exports = require(\"../../node_modules/arraybuffer-loader/lib/to-array-buffer.js\")(\"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\")","import { ColorRGB } from '../model/color'\nimport { BamFrameEntry, BamFrameHeader } from '../model/bam-frame'\n\n\ntype Dimensions = {\n    width: number,\n    height: number\n}\n\ntype Range = { start: number, end: number }\n\ntype Padding = {\n    /**\n     * Sum of transparent area left and right of actual image\n     */\n    horizontal: number,\n    /**\n     * Transparent area on top of actual image (TODO: bottom probably requires cycles[])\n     */\n    vertical: number\n}\n\n/**\n * BAM texture object\n * @param {Function} decompressFrames\n * @param {Function} combineFrames\n */\nexport default class BAMTexture {\n\n    constructor(\n        public name: string,\n        public header: BamFrameHeader,\n        public palette: ColorRGB[],\n        public frames: BamFrameEntry[]\n    ) {}\n\n    /**\n     * Decompress frames\n     */\n    decompressFrames() {\n        this.frames.forEach(frame => {\n            if (frame.compressed && frame.data) {\n                frame.data = decompressRLE(frame.data, this.header.compressedColorIndex)\n                frame.compressed = false\n            }\n        })\n    }\n\n    /**\n     * Combine frames into one single frame which replace them.\n     *\n     * TODO: It seems that cycles[] was used to determine how frames attached to each other\n     * (along with their centerX/Y fields). Currently this method works only for vertical combinations.\n     */\n    combineFrames() {\n        this.applyPaddedDimensions();\n        const dimensions = this.frames.reduce((prev: BamFrameEntry, next: BamFrameEntry) => {\n            const { paddedWidth: prevPaddedWidth = 0, paddedHeight: prevPaddedHeight = 0 } = prev\n            const { paddedWidth: nextPaddedWidth = 0, paddedHeight: nextPaddedHeight = 0 } = next\n            return {\n                width: prevPaddedWidth < nextPaddedWidth ? nextPaddedWidth : prevPaddedWidth,\n                height: prevPaddedHeight + nextPaddedHeight,\n            }\n        })\n        const spriteSize = dimensions.width * dimensions.height;\n        const data = new Uint8Array(spriteSize);\n        this.frames.forEach((frame, index) => {\n            this.putFrameInSprite(data, dimensions, frame, index);\n        });\n        this.frames = [{\n            data,\n            width: dimensions.width,\n            height: dimensions.height,\n        }];\n    }\n\n    /**\n     * Extend frame with transparency paddings and place it in sprite data array. \n     *\n     * @param frame\n     * @param frameIndex\n     * @param spriteData\n     * @param spriteDimensions\n     */\n    putFrameInSprite(spriteData: Uint8Array, spriteDimensions: Dimensions, frame: BamFrameEntry, frameIndex: number) {\n        // Frame range\n        const { start: frameStart, end: frameEnd } = this.getFrameRange(frameIndex, spriteDimensions);\n        // Transparent paddings\n        const { horizontal, vertical } = this.getFramePadding(frame, spriteDimensions);\n        // Actual image range\n        const imageRange = { start: frameStart + vertical, end: frameEnd };\n        // Fill top padding with transparency\n        for (let i = frameStart; i < imageRange.start; i++) {\n            spriteData[i] = this.header.compressedColorIndex;\n        }\n        // Fill image data\n        this.putImageInSprite(spriteData, imageRange, frame, horizontal);\n    }\n\n    /**\n     * Extend frame with horizontal transparent padding and\n     * copy frame pixel data into specific range of output data array.\n     *\n     * Horizontal padding is required to concatenate two frames in one consistent sprite.\n     *\n     * Example: let T be transparency pixel and P be an actual frame data pixel,\n     * and frame data is [P, P, P, P, P, P] with image width of 3.\n     *\n     * Then, when we set padding of 2, we get\n     * [T, T, P, P, P, T, T, P, P, P]\n     */\n    putImageInSprite(data: Uint8Array, range: Range, frame: BamFrameEntry, padding: number) {\n        let frameBytesCounter = 0;\n        let paddingBytesCounter = padding;\n        let srcPixelIndex = 0;\n        for (let i = range.start; i < range.end; i++) {\n            if (paddingBytesCounter !== 0) { // Process transparent padding\n                data[i] = this.header.compressedColorIndex;\n                paddingBytesCounter--;\n            } else { // Process actual image pixels\n                if (data) {\n                    data[i] = frame.data ? new Uint8Array(frame.data)[srcPixelIndex] : 0\n                }\n                srcPixelIndex++;\n                frameBytesCounter++;\n            }\n            if (frameBytesCounter === frame.width) { // Go to the next padding\n                paddingBytesCounter = padding;\n                frameBytesCounter = 0;\n            }\n        }\n    }\n\n    /**\n     * Add paddedWidth/paddedHeight properties, calculated as (original width/height + transparent padding)\n     * for each frame.\n     *\n     * Frames concatenated with centerX, centerY coordinates.\n     * When centerX/centerY is negative, actual image is shifted right/bottom\n     */\n    applyPaddedDimensions() {\n        this.frames = this.frames.map(frame => ({\n            ...frame,\n            paddedWidth: ((frame.centerX ?? 0) < 0) ? Math.abs(frame.centerX ?? 0) + frame.width : frame.width,\n            paddedHeight: ((frame.centerY ?? 0) < 0) ? Math.abs(frame.centerY ?? 0) + frame.height : frame.height,\n        }));\n    }\n\n    /**\n     * Get start/end offsets for the frame in the output array\n     *\n     * @param frameIndex Frame index\n     * @param {Dimensions} spriteDimensions Resulting image dimenstions\n     * @returns {Range}\n     */\n    getFrameRange(frameIndex: number, spriteDimensions: Dimensions) {\n        let start = 0;\n        for (let i = 0; i < frameIndex; i++) {\n            const { paddedWidth = 0, paddedHeight = 0} = this.frames[i]\n                start += paddedWidth * paddedHeight\n        }\n        const end = start + spriteDimensions.width * (this.frames[frameIndex].paddedHeight ?? 0);\n        return { start, end };\n    }\n\n    /**\n     * Get transparent padding around actual image\n     */\n    getFramePadding(frame: BamFrameEntry, spriteDimensions: Dimensions): Padding {\n        return {\n            horizontal: spriteDimensions.width - frame.width,\n            vertical: spriteDimensions.width * ((frame.paddedHeight ?? 0) - frame.height),\n        };\n    }\n}\n\n/**\n * Decompress RLE-compressed data\n *\n * Each compressionByte will be repeated as specified by\n * the next byte value plus one, e.g. for compressionByte = 0x0A\n *\n * 0xAB 0x0A 0x02 0x0B  becomes 0xAB 0x0A 0x0A 0x0A 0x0B:\n *\n * All other bytes will not change.\n *\n * @param data Frame compressed data\n * @param compressionByte Byte used for compression\n * @returns {Uint8Array} Decompressed data\n */\nexport function decompressRLE(data: ArrayBuffer, compressionByte: number) {\n    const compressedData = new DataView(data);\n    const decompressedData = [];\n    for (let i = 0; i < compressedData.byteLength; i++) {\n        if (compressedData.getUint8(i) === compressionByte) {\n            const numberOfRepeats = compressedData.getUint8(i + 1) + 1;\n            for (let processedRepeats = 0; processedRepeats < numberOfRepeats; processedRepeats++) {\n                decompressedData.push(compressionByte);\n            }\n            i = i + 1;\n        } else {\n            decompressedData.push(compressedData.getUint8(i));\n        }\n    }\n    return new Uint8Array(decompressedData);\n}\n","import BAMTexture from './bam-texture';\nimport { BamFrameHeader, BamFrameEntry } from '../model/bam-frame';\nimport { ColorRGB } from '../model/color';\n\nexport { BAMTexture };\n\n/**\n * @typedef {Object} BAMTextureArgs\n * @property {string} name\n * @property {FrameHeader} header\n * @property {Color[]} palette\n * @property {FrameEntry[]} frames\n *\n * @typedef {Object} FrameEntry\n * @property {number} width\n * @property {number} height\n * @property {number} centerX\n * @property {number} centerY\n * @property {boolean} compressed Frame data is RLE compressed\n * @property {ArrayBuffer} data Pixels in RGBA\n *\n * @typedef {Object} FrameHeader\n * @property {number} frameEntriesCount\n * @property {number} cyclesCount\n * @property {number} compressedColorIndex\n * @property {number} frameEntriesOffset\n * @property {number} paletteOffset\n * @property {number} frameLookupTableOffset\n *\n * @typedef {Object} Color\n * @property {number} red\n * @property {number} green\n * @property {number} blue\n *\n */\n\n/**\n * @see http://gemrb.org/iesdp/file_formats/ie_formats/bam_v1.htm#bamv1_Header\n */\nconst offsets = {\n    signature: 0x0000,\n    version: 0x0004,\n    frameEntriesCount: 0x0008,\n    cyclesCount: 0x000a,\n    compressedColorIndex: 0x000b,\n    frameEntries: 0x000c,\n    palette: 0x0010,\n    frameLookupTable: 0x0014,\n};\n\n/**\n * @see http://gemrb.org/iesdp/file_formats/ie_formats/bam_v1.htm#bamv1_FrameEntry\n */\nconst frameHeaderSize = 12;\n\n/**\n * Adapter for BAM images\n *\n * @property {Function} parse\n * @property {Function} parseHeader\n * @property {Function} parsePalette\n * @property {Function} parseFrames\n */\nexport default class BAMAdapter {\n    /**\n     * Parse BAM image binary data\n     *\n     * @param data BAM image binary data\n     * @returns {BAMTexture}\n     */\n    \n    private signature: string = ''\n\n    parse(name: string, data: ArrayBuffer) {\n        const header = this.parseHeader(data);\n        const frames = this.parseFrames(data, header);\n        const palette = this.parsePalette(data, header.paletteOffset, header.frameLookupTableOffset);\n        const texture = new BAMTexture(name, header, palette, frames);\n        return texture;\n    }\n\n    /**\n     * Extract header data from BAM image\n     *\n     * @param data BAM image binary data\n     * @throws {Error} When magic word not matched\n     */\n    parseHeader(data: ArrayBuffer): BamFrameHeader {\n        const view = new DataView(data);\n        let signature = new Uint8Array(8);\n        for (let offset = 0x0000; offset < 0x0008; offset++) {\n            signature[offset] = view.getUint8(offset);\n        }\n        const parsedSignature = new TextDecoder('utf-8').decode(signature);\n        if (parsedSignature === 'BAM V1  ') {\n            this.signature = parsedSignature;\n            return {\n                frameEntriesCount: view.getUint16(offsets.frameEntriesCount, true),\n                cyclesCount: view.getUint8(offsets.cyclesCount),\n                compressedColorIndex: view.getUint8(offsets.compressedColorIndex),\n                frameEntriesOffset: view.getUint32(offsets.frameEntries, true),\n                paletteOffset: view.getUint32(offsets.palette, true),\n                frameLookupTableOffset: view.getUint32(offsets.frameLookupTable, true),\n            };\n        }\n        throw new Error(`Unknown format: ${parsedSignature}`);\n    }\n\n    /**\n     * Extract palette data from BAM image\n     *\n     * @param data BAM image binary data\n     * @param offset Where palette starts\n     * @param end Where palette ends\n     */\n    parsePalette(data: ArrayBuffer, offset: number, end: number): ColorRGB[] {\n        const view = new DataView(data);\n        const palette = [];\n        for (let i = offset; i < end - 4; i = i + 4) {\n            const red = view.getUint8(i);\n            const green = view.getUint8(i + 1);\n            const blue = view.getUint8(i + 2);\n            // const alpha = view.getUint8(i + 3); not used\n            palette.push({ red, green, blue });\n        }\n        return palette;\n    }\n\n    /**\n     * Extract frames entries and data from BAM binary buffer\n     *\n     * @param data BAM image binary data\n     * @param header\n     */\n    parseFrames(data: ArrayBuffer, frameHeader: BamFrameHeader): BamFrameEntry[] {\n        const { frameEntriesOffset, frameEntriesCount} = frameHeader\n        const view = new DataView(data);\n        const frameEntries = [];\n        for (let frameIndex = 0; frameIndex < frameEntriesCount; frameIndex++) {\n            const frameOffset = frameEntriesOffset + frameIndex * frameHeaderSize;\n            const frameEntry = {\n                width: view.getUint16(frameOffset + 0x0000, true),\n                height: view.getUint16(frameOffset + 0x0002, true),\n                centerX: view.getInt16(frameOffset + 0x0004, true),\n                centerY: view.getInt16(frameOffset + 0x0006, true),\n                compressed: Boolean(view.getUint8(frameOffset + 0x0008 + 3)),\n                data: null as unknown as ArrayBuffer\n            };\n            // bit 0-30 is actual offset\n            const rgbaOffset = (view.getUint32(frameOffset + frameHeaderSize - 4, true) << 1) >> 1;\n            frameEntry.data = data.slice(rgbaOffset);\n            // bit 31 is RLE compression flag\n            const compressed = view.getUint32(frameOffset + frameHeaderSize - 4, true) >> 31;\n            frameEntry.compressed = !compressed;\n            frameEntries.push(frameEntry);\n        }\n        return frameEntries;\n    }\n}\n","import { CharacterColor, ColorRGB } from \"./color\";\n\nconst offsets = {\n    metal: 0x04,\n    minor: 0x10,\n    major: 0x1c,\n    skin: 0x28,\n    leather: 0x34,\n    armor: 0x40,\n    hair: 0x4c,\n    // shades\n};\nexport default class Palette {\n    setColors(palette: ColorRGB[], colors: CharacterColor) {\n        const newPalette = [\n            ...palette,\n        ];\n        Object.keys(colors).forEach((color) => {\n            if (colors[color as keyof CharacterColor]) {\n                for (let i = 0; i < 12; i++) {\n                    // const pek = colors[color as keyof CharacterColor][i];\n                   //  const bek = newPalette[offsets[color as keyof CharacterColor] + i]\n                   newPalette[offsets[color as keyof CharacterColor] + i] = colors[color as keyof CharacterColor][i] as any;\n                }\n            }\n        });\n\n\n        return newPalette;\n    }\n\n    getTransparencyIndex(palette: ColorRGB[]) {\n        for (let i = 0; i < palette.length; i++) {\n            if (palette[i].red === 0 && palette[i].green === 255 && palette[i].blue === 0) {\n                return i;\n            }\n        }\n        return 0;\n    }\n\n    parse(data: ArrayBuffer) {\n        const view = new DataView(data);\n        const bmpRgbaOffset = view.getUint8(0x000a);\n        const palette = [];\n        let gradient = [];\n        // let shade = 0;\n        for (let i = bmpRgbaOffset; i < data.byteLength; i = i + 3) {\n            gradient.push({\n                blue: view.getUint8(i + 2),\n                green: view.getUint8(i + 1),\n                red: view.getUint8(i),\n            });\n            if (gradient.length === 12) {\n                palette.push(gradient);\n                gradient = [];\n            }\n        }\n        palette.reverse();\n        return palette;\n    }\n}\n","\nimport { BAMTexture } from '../adapters/bam';\nimport Palette from './palette';\nimport { CharacterColor } from './color';\n\nexport default class Sprite {\n\n    BAMTexture: BAMTexture\n    colors: CharacterColor = {\n        hair: null,\n        skin: null,\n        major: null,\n        minor: null,\n        armor: null,\n        leather: null,\n        metal: null\n    }\n\n    constructor(BAMTexture: BAMTexture) {\n        this.BAMTexture = BAMTexture;\n\n    }\n\n    getAsBase64() {\n        const PaletteHelper = new Palette();\n        let palette = [...this.BAMTexture.palette];\n        const { width, height, data } = this.BAMTexture.frames[0];\n        const transparencyIndex = PaletteHelper.getTransparencyIndex(palette);\n        palette = PaletteHelper.setColors(palette, this.colors);\n\n        const pixels = new Uint8Array(data as ArrayBuffer);\n\n        const canvas = document.createElement('canvas');\n        canvas.width = width;\n        canvas.height = height;\n        const context = canvas.getContext('2d') as CanvasRenderingContext2D; // TODO : Create canvas every time is dumb\n        const imgData = context.createImageData(width, height);\n\n        for (let i = 0; i < pixels.length; i++) {\n            imgData.data[i * 4 + 0] = palette[pixels[i]].blue;\n            imgData.data[i * 4 + 1] = palette[pixels[i]].green;\n            imgData.data[i * 4 + 2] = palette[pixels[i]].red;\n            imgData.data[i * 4 + 3] = (pixels[i] === transparencyIndex) ? 0 : 255;\n        }\n\n        context.putImageData(imgData, 0, 0);\n        const result = canvas.toDataURL('image/png');\n        return result;\n    }\n}\n","import React from 'react'\n/* eslint import/no-webpack-loader-syntax: off */\nimport colorIcon from '!arraybuffer-loader!./COLGRAD.BAM'\nimport palette from '!arraybuffer-loader!./MPALETTE.bmp'\nimport BAMAdapter from '../adapters/bam';\nimport Sprite from '../model/sprite';\nimport Palette from '../model/palette';\n\nexport const BamDemo: React.FC = () => {\n    const [color, setColor] = React.useState(0)\n    const adapter = new BAMAdapter();\n    const bam = adapter.parse('COLGRAD', colorIcon);\n    bam.decompressFrames();\n    if (bam.frames.length > 1) {\n        bam.combineFrames();\n    }\n    const gradient = new Sprite(bam);\n    const paletteParser = new Palette()\n    const parsedPalette = paletteParser.parse(palette)\n    gradient.colors.metal = parsedPalette[color]\n    const base64 = gradient.getAsBase64();\n    return <div>\n        <button onClick={() => setColor(color + 1)}>Next color: {color}</button>\n        <img src={base64} alt=\"Color icon\" />\n    </div>\n}\n\nexport default BamDemo\n","import React from 'react';\nimport './App.css';\nimport BamDemo from './components/bam-demo';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <BamDemo />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","module.exports = require(\"../../node_modules/arraybuffer-loader/lib/to-array-buffer.js\")(\"QkFNIFYxICABAAEAGAAAACgAAAAoBAAAGAAYAPf/9/8qBACAAQAAAAD/AAAAAAAAAID/AACA/wD/4ogA/N2FAPfUfwDwyXcA5rlsANqkXgDLi0wAum44AKZQJQCKORoAbB8OAEgBAAD///YA///RAP//sQD//3EA//8RAPDwAADR0QAAsLAAAJCQAABwcAAAUFAAAEBAAAD/9v8A/9H/AP+x/wD/cf8A/xH/APAA8ADRANEAsACwAJAAkABwAHAAUABQAEAAQAD2//8A0f//ALH//wCR//8AEf//AADw8AAA0dEAALCwAACQkAAAcHAAAFBQAABAQAD29v8A0dH/AJGR/wBxcf8AMTH/AAAA8AAAANEAAACwAAAAkAAAAHAAAABQAAAAQAD/9vYA/9HRAP+xsQD/cXEA/xERAPAAAADRAAAAsAAAAJAAAABwAAAAUAAAAEAAAAD2//YA0f/RALH/sQBx/3EAEf8RAADwAAAA0QAAALAAAACQAAAAcAAAAFAAAABAAAD76ZgA9+R0APLcPgDlyi8Azq4mALWPHACbcBIAfVQNAPvCvwD3nbsA8mW1AOVSpwDORY4AtTd0AJsoWgB9HEUA1Om/AMDkuwB73LUAbcqnAGWujgBdj3QAU3BaAEVURQDEsr8AsJ27AIt1tQBtUqcAZUWOAF03dABTKFoARRxFAPvCmAD3nXQA8mU+AOVSLwDORSYAtTccAJsoEgB9HA0A1OmYALDkdAB73D4AbcovAGWuJgBdjxwAU3ASAEVUDQD/2NcA/7i3AP+IhwDweHcA0WhoALBYVwCQSEcAcDg3ANj/1wDI/7cAiP+HAHjwdwBo0WgAWLBXAEiQRwA4cDcAyMjXALi4twCYmIcAeHh3AGhoaABYWFcASEhHADg4NwD/2LEA/7hxAP+IEQDweAAA0WgAALBYAACQSAAAcDgAANj/sQC4/3EAiP8RAHjwAABo0QAAWLAAAEiQAAA4cAAA2Nf/AMi3/wCIh/8AeHfwAGho0QBYV7AASEeQADg3cADIof8AuHH/AJgg/wB4APAAaADRAFgAsABIAJAAOABwAP+x2AD/cbgA/xGIAPAAeADRAGgAsABYAJAASABwADgA2NfYALi3uACIh4gAeHd4AGhoaABYV1gASEdIADg3OAChyP8Agbj/ACCY/wAAePAAAGjRAABYsAAASJAAADhwANfY2ADHuLgAh4iIAHd4eABoaGgAV1hYAEdISAA3ODgAsf/YAIH/uAAR/4gAAPB4AADRaAAAsFgAAJBIAABwOADHoNgAt3G4AJchiAB3AHgAaABoAFcAWABHAEgANwA4AKDH2ABxt7gAIZeIAAB3eAAAaGgAAFdYAABHSAAANzgA2NexALi3cQCIhxEAeHcAAGhoAABYVwAASEcAADg3AAAAAA8ODg0NDAwMDAsLCwsLCwwMDAwNDQ4ODw4ODQ0MDAsLCwsLCgoLCwsLCwwMDQ0ODg4NDQwMCwsLCgoKCgoKCgoLCwsMDA0NDg0NDAwLCwoKCgkJCQkJCQoKCgsLDAwNDQ0MDAsLCgoJCQkJCAgJCQkJCgoLCwwMDQ0MCwsKCgkJCAgICAgICAgJCQoKCwsMDQwMCwoKCQkICAcHBwcHBwgICQkKCgsMDAwLCwoJCQgIBwcHBgYHBwcICAkJCgsLDAwLCgoJCQgHBwYGBgYGBgcHCAkJCgoLDAwLCgoJCAgHBgYFBQUFBgYHCAgJCgoLDAwLCgkJCAcHBgYFBAQFBgYHBwgJCQoLDAsLCgkJCAcHBgUFBAQFBQYHBwgJCQoLCwsLCgkJCAcHBgUFBAQFBQYHBwgJCQoLCwwLCgkJCAcHBgYFBAQFBgYHBwgJCQoLDAwLCgoJCAgHBgYFBQUFBgYHCAgJCgoLDAwLCgoJCQgHBwYGBgYGBgcHCAkJCgoLDAwLCwoJCQgIBwcHBgYHBwcICAkJCgsLDAwMCwoKCQkICAcHBwcHBwgICQkKCgsMDA0MCwsKCgkJCAgICAgICAgJCQoKCwsMDQ0MDAsLCgoJCQkJCAgJCQkJCgoLCwwMDQ0NDAwLCwoKCgkJCQkJCQoKCgsLDAwNDQ4NDQwMCwsLCgoKCgoKCgoLCwsMDA0NDg4ODQ0MDAsLCwsLCgoLCwsLCwwMDQ0ODg8ODg0NDAwMDAsLCwsLCwwMDAwNDQ4ODw==\")"],"sourceRoot":""}